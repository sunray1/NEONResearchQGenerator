y_var_nested <- results[2]
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(x_comment, y_comment, nested_x, nested_y)
runApp()
paste(vars$comments[vars$comments != ""], collapse = "\n")
paste(comments[comments != ""], collapse = "\n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x_var_raw <- "[Y]"
results <- replace_placeholders(x_var_raw)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var <- x_var_raw
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var <- x_var_raw
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
}
# Load data
variables <- read.csv("variables.csv", stringsAsFactors = FALSE)
# Function to replace placeholders with nested values
replace_placeholders <- function(variable) {
pattern <- "\\[(.*?)\\]"
replacement <- NULL
if (grepl(pattern, variable)) {
placeholder <- regmatches(variable, regexpr(pattern, variable))[[1]]
key <- sub("\\[(.*?)\\]", "\\1", placeholder)
nested_options <- variables$Variable[variables$Type == key]
if (length(nested_options) > 0) {
replacement <- sample(nested_options, 1)
variable <- sub(pattern, replacement, variable)
}
}
return(c(variable, replacement))
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var <- x_var_raw
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
}
x_var_nested <- results[2]
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinythemes)
library(tools)
# Load data
variables <- read.csv("variables.csv", stringsAsFactors = FALSE)
# Function to replace placeholders with nested values
replace_placeholders <- function(variable) {
pattern <- "\\[(.*?)\\]"
replacement <- NULL
if (grepl(pattern, variable)) {
placeholder <- regmatches(variable, regexpr(pattern, variable))[[1]]
key <- sub("\\[(.*?)\\]", "\\1", placeholder)
nested_options <- variables$Variable[variables$Type == key]
if (length(nested_options) > 0) {
replacement <- sample(nested_options, 1)
variable <- sub(pattern, replacement, variable)
}
}
return(c(variable, replacement))
}
selected_vars <- reactiveVal(list(x = NULL, y = NULL, comments = NULL))
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
}
x_var_nested <- results[2]
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NULL
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NULL
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste(toTitleCase(x_var), ":<br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste(toTitleCase(y_var), ":<br>", ":", sep=""),
paste(y_comment, "<br><br>", sep=""),
paste(toTitleCase(x_var_nested), ":<br>", ":", sep=""),
paste(nested_x, "<br><br>", sep=""),
paste(toTitleCase(y_var_nested), ":<br>", ":", sep=""),
paste(nested_y, "<br><br>", sep=""),)
comments <- c(paste(toTitleCase(x_var), ":<br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste(toTitleCase(y_var), ":<br>", ":", sep=""),
paste(y_comment, "<br><br>", sep=""),
paste(toTitleCase(x_var_nested), ":<br>", ":", sep=""),
paste(nested_x, "<br><br>", sep=""),
paste(toTitleCase(y_var_nested), ":<br>", ":", sep=""),
paste(nested_y, "<br><br>", sep=""))
runApp()
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NULL
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NULL
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
runApp()
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NA
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste(toTitleCase(x_var), ":<br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste(toTitleCase(y_var), ":<br>", ":", sep=""),
paste(y_comment, "<br><br>", sep=""),
paste(toTitleCase(x_var_nested), ":<br>", ":", sep=""),
paste(nested_x, "<br><br>", sep=""),
paste(toTitleCase(y_var_nested), ":<br>", ":", sep=""),
paste(nested_y, "<br><br>", sep=""))
comments <- comments[!is.na(comments)]
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
x_var <- x_var_raw
x_var <- x_var_raw
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NA
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste(toTitleCase(x_var), ":<br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste(toTitleCase(y_var), ":<br>", ":", sep=""),
paste(y_comment, "<br><br>", sep=""),
paste(toTitleCase(x_var_nested), ":<br>", ":", sep=""),
paste(nested_x, "<br><br>", sep=""),
paste(toTitleCase(y_var_nested), ":<br>", ":", sep=""),
paste(nested_y, "<br><br>", sep=""))
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NA
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste(toTitleCase(x_var), ":<br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste(toTitleCase(y_var), ":<br>", ":", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste(toTitleCase(x_var_nested), ":<br>", ":", sep="") else "",
if (!is.null(nested_x)) paste(nested_x, "<br><br>", sep="") else "",
if (!is.null(y_var_nested)) paste(toTitleCase(y_var_nested), ":<br>", ":", sep="") else "",
if (!is.null(nested_y)) paste(nested_y, "<br><br>", sep="") else ""
)
runApp()
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NA
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste("<b>", toTitleCase(y_var), ":</b><br>", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep="") else "",
if (!is.null(nested_x)) paste(nested_x, "<br><br>", sep="") else "",
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep="") else "",
if (!is.null(nested_y)) paste(nested_y, "<br><br>", sep="") else ""
)
comments
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste("<b>", toTitleCase(y_var), ":</b><br>", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (!is.null(nested_x)) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (!is.null(nested_y)) paste(nested_y, "<br><br>", sep="")
)
comments
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste("<b>", toTitleCase(y_var), ":</b><br>", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (!is.null(x_var_nested)) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (!is.null(y_var_nested)) paste(nested_y, "<br><br>", sep="")
)
comments
runApp()
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste("<b>", toTitleCase(y_var), ":</b><br>", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (nested_x != "") paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (nested_y != "") paste(nested_y, "<br><br>", sep="")
)
nzchar(nested_x)
is.null(nested_x)
is.na(nested_x)
nested_x
length(nested+x)
length(nested_x)
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
paste("<b>", toTitleCase(y_var), ":</b><br>", sep=""),
paste(y_comment, "<br><br>", sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (length(nested_x)!=0) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (length(nested_y)!=0) paste(nested_y, "<br><br>", sep="")
)
comments
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(neonUtilities)
water_chem <- loadByProduct(dpID="DP1.20093.001",
site=c("POSE"),    #stream site
#site=c("PRLA"),   #lake site
startdate="2022-11",
enddate="2022-12",
check.size = F)
View(water_chem)
View(water_chem$variables_20093)
View(water_chem$swc_fieldSuperParent)
View(water_chem$swc_fieldData)
View(water_chem$swc_domainLabData)
View(water_chem$swc_externalLabDataByAnalyte)
pheno <- loadByProduct(dpID="DP1.10055.001",
site=c("SERC"),    #stream site
#site=c("PRLA"),   #lake site
startdate="2022-11",
enddate="2022-12",
check.size = F)
View(pheno)
View(pheno$phe_perindividual)
View(pheno$phe_perindividualperyear)
View(pheno$phe_statusintensity)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load data
variables <- read.csv("variables.csv", stringsAsFactors = FALSE)
# Function to replace placeholders with nested values
replace_placeholders <- function(variable) {
pattern <- "\\[(.*?)\\]"
replacement <- NULL
if (grepl(pattern, variable)) {
placeholder <- regmatches(variable, regexpr(pattern, variable))[[1]]
key <- sub("\\[(.*?)\\]", "\\1", placeholder)
nested_options <- variables$Variable[variables$Type == key]
if (length(nested_options) > 0) {
replacement <- sample(nested_options, 1)
variable <- sub(pattern, replacement, variable)
}
}
return(c(variable, replacement))
}
x_var_raw <- sample(variables$Variable[variables$Type == "X"], 1)
y_var_raw <- sample(variables$Variable[variables$Type == "Y"], 1)
x_var <- x_var_raw
x_var_nested <- NA
while (grepl("\\[.*?\\]", x_var)) {
results <- replace_placeholders(x_var)
x_var <- results[1]
x_var_nested <- results[2]
}
if (is.na(x_var_nested)) {
x_var_nested <- NULL
}
y_var <- y_var_raw
y_var_nested <- NA
while (grepl("\\[.*?\\]", y_var)) {
results <- replace_placeholders(y_var)
y_var <- results[1]
y_var_nested <- results[2]
}
if (is.na(y_var_nested)) {
y_var_nested <- NULL
}
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
y_comment <- variables$Comment[variables$Variable == y_var_raw]
# Retrieve comments for nested variables if present
nested_x <- variables$Comment[variables$Variable == x_var_nested]
nested_y <- variables$Comment[variables$Variable == y_var_nested]
comments <- c(paste("<b>", toTitleCase(x_var), ":</b><br>", sep=""),
paste(x_comment, "<br><br>", sep=""),
if (y_comment!="") paste("<b>", toTitleCase(y_var), ":</b><br>",sep=""),
if (y_comment!="") paste(y_comment, "<br><br>",sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (length(nested_x)!=0) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (length(nested_y)!=0) paste(nested_y, "<br><br>", sep="")
)
comments
comments <- c(if (x_comment!="") paste("<b>", toTitleCase(x_var), ":</b><br>",sep=""),
if (x_comment!="") paste(x_comment, "<br><br>",sep=""),
if (y_comment!="") paste("<b>", toTitleCase(y_var), ":</b><br>",sep=""),
if (y_comment!="") paste(y_comment, "<br><br>",sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (length(nested_x)!=0) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (length(nested_y)!=0) paste(nested_y, "<br><br>", sep="")
)
# Retrieve comments for both main and nested variables
x_comment <- variables$Comment[variables$Variable == x_var_raw]
x_comment
all(x_comment != "")
all(x_comment == "")
comments <- c(if (all(x_comment != "")) paste("<b>", toTitleCase(x_var), ":</b><br>",sep=""),
if (all(x_comment != "")) paste(x_comment, "<br><br>",sep=""),
if (all(y_comment != "")) paste("<b>", toTitleCase(y_var), ":</b><br>",sep=""),
if (all(y_comment != "")) paste(y_comment, "<br><br>",sep=""),
if (!is.null(x_var_nested)) paste("<b>", toTitleCase(x_var_nested), ":</b><br>", sep=""),
if (length(nested_x)!=0) paste(nested_x, "<br><br>", sep=""),
if (!is.null(y_var_nested)) paste("<b>", toTitleCase(y_var_nested), ":</b><br>", sep=""),
if (length(nested_y)!=0) paste(nested_y, "<br><br>", sep="")
)
comments
runApp()
